# Common configuration
- name: DIKTAT_COMMON
  configuration:
    # put your package name here - it will be autofixed and checked
    domainName: org.ucombinator.jade
    testDirs: test
    # expected values:  disabledChapters: "Naming, Comments, General, Variables, Functions, Classes"
    # or: "1, 2, 3, 4, 5, 6"
    disabledChapters: ""
    kotlinVersion: 1.5
    srcDirectories: "main"
# Checks that functions/methods which return boolean have special prefix like "is/should/e.t.c"
- name: FUNCTION_BOOLEAN_PREFIX
  enabled: false
  configuration:
    allowedPrefixes: "" # A list of functions that return boolean and are allowed to use. Input is in a form "foo, bar".
# Identifier length should be in range [2,64] except names that used in industry like {i, j} and 'e' for catching exceptions
- name: IDENTIFIER_LENGTH
  enabled: false
# Checks that variable does not contain one single letter, only exceptions are fixed names that used in industry like {i, j}
- name: VARIABLE_NAME_INCORRECT
  enabled: false
# Checks that functions have kdoc
- name: MISSING_KDOC_ON_FUNCTION
  enabled: false
# Checks that on file level internal or public class or function has missing KDoc
- name: MISSING_KDOC_TOP_LEVEL
  enabled: false
# Checks that accessible internal elements (protected, public, internal) in a class are documented
- name: MISSING_KDOC_CLASS_ELEMENTS
  enabled: false
# Checks that file with zero or >1 classes has header KDoc
- name: HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE
  enabled: false
# Checks that file does not contain commented out code
- name: COMMENTED_OUT_CODE
  enabled: false
# TODO
# Orders imports alphabetically
- name: FILE_UNORDERED_IMPORTS
  enabled: false
  configuration:
    # use logical imports grouping with sorting inside of a group
    useRecommendedImportsOrder: true
# Checks that there is no wildcard imports. Exception: allowedWildcards
- name: FILE_WILDCARD_IMPORTS
  enabled: false
  configuration:
    allowedWildcards: "" # Allowed wildcards for imports (e.g. "import org.cqfn.diktat.*, import org.jetbrains.kotlin.*")
    useRecommendedImportsOrder: true
# Checks that the declaration part of a class-like code structures (class/interface/etc.) is in the proper order
- name: WRONG_ORDER_IN_CLASS_LIKE_STRUCTURES
  enabled: false
# Checks that properties with comments are separated by a blank line
- name: BLANK_LINE_BETWEEN_PROPERTIES
  enabled: false
# Checks top level order
- name: TOP_LEVEL_ORDER
  enabled: false
# TODO
# Checks that non-empty code blocks with braces follow the K&R style (1TBS or OTBS style)
- name: BRACES_BLOCK_STRUCTURE_ERROR
  enabled: false
  configuration:
    openBraceNewline: 'True'
    closeBraceNewline: 'True'
# TODO
# Checks that indentation is correct
- name: WRONG_INDENTATION
  enabled: false
  configuration:
    # Is newline at the end of a file needed
    newlineAtEnd: true
    # If true: in parameter list when parameters are split by newline they are indented with two indentations instead of one
    extendedIndentOfParameters: true
    # If true: if first parameter in parameter list is on the same line as opening parenthesis, then other parameters can be aligned with it
    alignedParameters: true
    # If true: if expression is split by newline after operator like +/-/`*`, then the next line is indented with two indentations instead of one
    extendedIndentAfterOperators: true
    # The indentation size for each file
    indentationSize: 2
# Checks that there is no empty blocks in a file.
# If allowEmptyBlocks is true, checks that it follows correct style (have a newline)
- name: EMPTY_BLOCK_STRUCTURE_ERROR
  enabled: false
  configuration:
    # Whether a newline after `{` is required in an empty block
    styleEmptyBlockWithNewline: 'True'
    allowEmptyBlocks: 'False'
# Checks that line breaks follow code style guide: rule 3.6
- name: WRONG_NEWLINES
  enabled: true
  configuration:
    # If the number of parameters on one line is more than this threshold, all parameters will be placed on separate lines.
    maxParametersInOneLine: 10
    # 3 by default.
    maxCallsInOneLine: 10
# Checks trailing comma
- name: TRAILING_COMMA
  enabled: true
  configuration:
    # VALUE_ARGUMENT
    valueArgument: false
    # VALUE_PARAMETER
    valueParameter: false
    # REFERENCE_EXPRESSION
    indices: false
    # WHEN_CONDITION_WITH_EXPRESSION
    whenConditions: false
    # STRING_TEMPLATE
    collectionLiteral: false
    # TYPE_PROJECTION
    typeArgument: false
    # TYPE_PARAMETER
    typeParameter: false
    # DESTRUCTURING_DECLARATION_ENTRY
    destructuringDeclaration: false
# Inspection that checks if there is no blank lines before first comment
- name: FIRST_COMMENT_NO_BLANK_LINE
  enabled: false
# Inspection that checks if there are blank lines between code and comment and between code start token and comment's text
- name: COMMENT_WHITE_SPACE
  enabled: false
  configuration:
    maxSpacesBeforeComment: 2
    maxSpacesInComment: 1
# Type aliases provide alternative names for existing types when type's reference text is longer 25 chars
- name: TYPE_ALIAS
  enabled: false
  configuration:
    typeReferenceLength: '25' # max length of type reference
# Checks that variables of generic types have explicit type declaration
- name: GENERIC_VARIABLE_WRONG_DECLARATION
  enabled: false
# Checks that function length isn't too long
- name: TOO_LONG_FUNCTION
  enabled: false
  configuration:
    maxFunctionLength: '30' # max length of function
    isIncludeHeader: 'false' # count function's header
# Warns if there are nested functions
- name: AVOID_NESTED_FUNCTIONS
  enabled: false
# Checks that function doesn't contains too many parameters
- name: TOO_MANY_PARAMETERS
  enabled: false
  configuration:
    maxParameterListSize: '5' # max parameters size
# Checks that function doesn't have too many nested blocks
- name: NESTED_BLOCK
  enabled: false
  configuration:
    maxNestedBlockQuantity: '4'
# Checks that property in constructor doesn't contain comment
- name: KDOC_NO_CONSTRUCTOR_PROPERTY
  enabled: false
# Checks if null-check was used explicitly (for example: if (a == null))
# Try to avoid explicit null checks (explicit comparison with `null`)
# Kotlin is declared as [Null-safe](https://kotlinlang.org/docs/reference/null-safety.html) language.
# But Kotlin architects wanted Kotlin to be fully compatible with Java, that's why `null` keyword was also introduced in Kotlin.
# There are several code-structures that can be used in Kotlin to avoid null-checks. For example: `?:`,  `.let {}`, `.also {}`, e.t.c
- name: AVOID_NULL_CHECKS
  enabled: false
