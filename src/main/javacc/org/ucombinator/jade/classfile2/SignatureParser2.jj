PARSER_BEGIN(SignatureParser2)

package org.ucombinator.jade.classfile2;

import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.type.*;

/**
 * Simple brace matcher.
 */
public class SignatureParser2 {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    SignatureParser2 parser = new SignatureParser2(System.in);
    parser.Input();
  }

}

PARSER_END(SignatureParser2)

/** Root production. */
int Input() : {} {
  MatchedBraces() <EOF>
  { return 0; }
}

/** Brace matching production. */
void MatchedBraces() : {} {
  "{" [ MatchedBraces() ] "}"
}

///////////////////////

// Up to date for: JVMS 22 <https://docs.oracle.com/javase/specs/jvms/se22/html/jvms-4.html#jvms-4.7.9.1>

// TODO: "identifier" and how it conflicts with BaseType

Type BaseType() : {} {
  "B" { return PrimitiveType.byteType(); }
| "C" { return PrimitiveType.charType(); }
| "D" { return PrimitiveType.doubleType(); }
| "F" { return PrimitiveType.floatType(); }
| "I" { return PrimitiveType.intType(); }
| "J" { return PrimitiveType.longType(); }
| "S" { return PrimitiveType.shortType(); }
| "Z" { return PrimitiveType.booleanType(); }
}

VoidType VoidDescriptor() : {} {
  "V" { return new VoidType(); }
}

// /////////////////////////////////////////////////////////////
// Java type signature

Type JavaTypeSignature() : {Type ret;} {
  // TODO: { return ReferenceTypeSignature(); }
  ret = ReferenceTypeSignature() { return ret; }
| ret = BaseType() { return ret; }
}

// /////////////////////////////////////////////////////////////
// Reference type signature

ReferenceType ReferenceTypeSignature() : {} {
  ClassTypeSignature() { return null; }
| TypeVariableSignature() { return null; }
| ArrayTypeSignature() { return null; }
}
ClassOrInterfaceType ClassTypeSignature() : {} {
//    L [PackageSpecifier] SimpleClassTypeSignature {ClassTypeSignatureSuffix} ;
{ return null; }
}
ClassOrInterfaceType PackageSpecifier() : {} { // TODO: nullable
//    Identifier / {PackageSpecifier}
{ return null; }
}
ClassOrInterfaceType SimpleClassTypeSignature() : {} {
//    Identifier [TypeArguments]
{ return null; }
}
NodeList<Type> TypeArguments() : {} { // TODO: nullable
//    "<" TypeArgument() {TypeArgument()} ">"
{ return null; }
}
Type TypeArgument() : {} {
//    [WildcardIndicator()] ReferenceTypeSignature()
//    "*"
{ return null; }
}
//WildcardIndicator:
//    "+"
//    "-"
ClassOrInterfaceType ClassTypeSignatureSuffix() : {} {
  "." SimpleClassTypeSignature() { return null; }
}
TypeParameter TypeVariableSignature() : {} {
//  "T" Identifier() ";" { return null; }
  { return null; }
}
ArrayType ArrayTypeSignature() : {} {
  "[" JavaTypeSignature() { return null; }
}


// /////////////////////////////////////////////////////////////
// Class signature
//ClassSignature:
//    [TypeParameters()] SuperclassSignature() {SuperinterfaceSignature()}
//TypeParameters:
//    < TypeParameter() {TypeParameter()} >
TypeParameter TypeParameter() : {} {
//    Identifier ClassBound() {InterfaceBound()}
{ return null; }
}
//List<ReferenceType> ClassBound() : {} {
//    : [ReferenceTypeSignature()]
//{ return null; }
//}
ReferenceType InterfaceBound() : {ReferenceType ret;} {
  ":" ret = ReferenceTypeSignature() { return ret; }
}
ClassOrInterfaceType SuperclassSignature() : {ClassOrInterfaceType ret;} {
  ret = ClassTypeSignature() { return ret; }
}
ClassOrInterfaceType SuperinterfaceSignature() : {ClassOrInterfaceType ret;} {
  ret = ClassTypeSignature() { return ret; }
}

// /////////////////////////////////////////////////////////////
// Method signature
//MethodSignature:
//    [TypeParameters] ( {JavaTypeSignature} ) Result {ThrowsSignature}
Type Result() : {} {
  JavaTypeSignature() { return null; }
| VoidDescriptor() { return null; }
}
ReferenceType ThrowsSignature() : {} {
//  "^" ClassTypeSignature() { return null; }
//| "^" TypeVariableSignature() { return null; }
{ return null; }
}

// /////////////////////////////////////////////////////////////
// Field signature
ReferenceType FieldSignature() : {ReferenceType ret;} {
  // TODO: avoid needing to assign to it/nt/nt1/???
  ret = ReferenceTypeSignature() { return ret; }
}
