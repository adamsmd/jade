// import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.kotlin.gradle.dsl.KotlinCompile
import org.ucombinator.antlr.AntlrCharVocab
import org.ucombinator.jade.gradle.GitVersionPlugin

repositories {
  mavenCentral()
}

plugins {
  kotlin("jvm") // version "1.5.31"
  antlr // TODO: set generated/sources
  // id("org.jetbrains.dokka") version "1.5.31"
  // javadoc-plugin
  // kotlin-as-java-plugin
  id("com.diffplug.spotless") version "6.3.0"

  // Code coverage
  id("jacoco")
  id("org.jetbrains.kotlinx.kover") version "0.5.0"

  id("com.github.jk1.dependency-license-report") version "2.0"
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    // id("org.jetbrains.kotlin.jvm")

  // Apply the application plugin to add support for building a CLI application in Java.
  application
}

// version = "0.1.0"
apply<GitVersionPlugin>()


// addSbtPlugin("com.eed3si9n" % "sbt-assembly" % "1.1.0") // Adds `sbt assembly`
// addSbtPlugin("net.virtual-void" % "sbt-dependency-graph" % "0.9.2") // Adds `sbt dependencyTree`

/** This object was generated by sbt-buildinfo. */
// case object BuildInfo {
//   /** The value is "helloworld". */
//   val name: String = "helloworld"
//   /** The value is "0.1-SNAPSHOT". */
//   val version: String = "0.1-SNAPSHOT"
//   /** The value is "2.10.3". */
//   val scalaVersion: String = "2.10.3"
//   /** The value is "0.13.2". */
//   val sbtVersion: String = "0.13.2"
//   libraryDependencies
//   Build-time
//   override val toString: String = "name: %s, version: %s, scalaVersion: %s, sbtVersion: %s".format(name, version, scalaVersion, sbtVersion)
// }
// Jade version 725cc2ca6a02ac1712a325c922617e47984da6a4-dirty (https://github.org/ucombinator/jade)
// Build tools: Scala 3.0.2, SBT 1.5.5
// Build time: 2021-09-23 07:15:27.105+0800 1632352527105ms
// Libraries:
//   ch.qos.logback:logback-classic:1.2.6
//   com.github.javaparser:javaparser-core-serialization:3.23.0
//   com.github.javaparser:javaparser-core:3.23.0
//   com.github.javaparser:javaparser-symbol-solver-core:3.23.0
//   com.typesafe.scala-logging:scala-logging:3.9.4
//   info.picocli:picocli-codegen:4.6.1
//   info.picocli:picocli:4.6.1
//   org.jgrapht:jgrapht-core:1.5.1
//   org.jgrapht:jgrapht-ext:1.5.1
//   org.jgrapht:jgrapht-io:1.5.1
//   org.jgrapht:jgrapht-opt:1.5.1
//   org.ow2.asm:asm-analysis:9.2
//   org.ow2.asm:asm-commons:9.2
//   org.ow2.asm:asm-tree:9.2
//   org.ow2.asm:asm-util:9.2
//   org.ow2.asm:asm:9.2
//   org.scala-lang:scala3-library:3.0.2
//   org.scalatest:scalatest:3.2.10:test

dependencies {
  // For parsing signatures
  antlr("org.antlr:antlr4:4.9.3")

  // Testing
  testImplementation(kotlin("test"))

  // Logging (see also io.github.microutils:kotlin-logging-jvm)
  implementation("ch.qos.logback:logback-classic:1.2.6")

  // Command-line argument parsing
  implementation("com.github.ajalt.clikt:clikt:3.4.0")

  // Abstract Syntax Trees for the Java language
  implementation("com.github.javaparser:javaparser-core:3.23.0") // Main library
  implementation("com.github.javaparser:javaparser-core-serialization:3.23.0") // Serialization to/from JSON
  implementation("com.github.javaparser:javaparser-symbol-solver-core:3.23.0") // Resolving symbols and identifiers
  // Omitting the JavaParser "parent" package as it is just metadata
  // Omitting the JavaParser "generator" and "metamodel" packages as they are just for building JavaParser

  // Logging (see also ch.qos.logback:logback-classic)
  implementation("io.github.microutils:kotlin-logging-jvm:2.1.20")

  // Vertex and edge graphs
  implementation("org.jgrapht:jgrapht-core:1.5.1")
  implementation("org.jgrapht:jgrapht-ext:1.5.1")
  // implementation("org.jgrapht:jgrapht-guava:1.5.1")
  implementation("org.jgrapht:jgrapht-io:1.5.1")
  implementation("org.jgrapht:jgrapht-opt:1.5.1")

  // `.class` file parsing and analysis
  implementation("org.ow2.asm:asm:9.2")
  implementation("org.ow2.asm:asm-analysis:9.2")
  implementation("org.ow2.asm:asm-commons:9.2")
  // implementation("org.ow2.asm:asm-test:9.2")
  implementation("org.ow2.asm:asm-tree:9.2")
  implementation("org.ow2.asm:asm-util:9.2")
}

// println(GradleVersion.current().getVersion())
// println(GradleVersion.current().toString())

application {
  mainClass.set("org.ucombinator.jade.main.MainKt")
}

// spotless { // if you are using build.gradle.kts, instead of 'spotless {' use:
configure<com.diffplug.gradle.spotless.SpotlessExtension> {
  // kotlin {
  //   // by default the target is every '.kt' and '.kts` file in the java sourcesets
  //   ktfmt()
  //   // ktlint().userData(mapOf(
  //   //   "indent_size" to "2",
  //   //   "continuation_indent_size" to "2",
  //   //   "disabled_rules" to "import-ordering"))
  //   diktat()   // has its own section below
  //   prettier() // has its own section below
  //   // licenseHeader '/* (C)$YEAR */' // or licenseHeaderFile
  // }
  kotlinGradle {
    target("*.gradle.kts") // default target for kotlinGradle
    // ktfmt()
    // ktlint().userData(
    //   mapOf(
    //     "indent_size" to "2",
    //     "continuation_indent_size" to "2",
    //     "disabled_rules" to "import-ordering"
    //   )
    // )
    // diktat()
    // prettier()
  }
}

val antlrCharVocab = tasks.register<AntlrCharVocab>("antlrCharVocab", tasks.generateGrammarSource)
tasks.generateGrammarSource {
  dependsOn(antlrCharVocab)
  arguments.add("-no-listener")
}

val flagsGen by tasks.registering {
  doLast {
    // TODO: avoid running when unchanged
    val flagsCode = FlagsGen.code(File(projectDir, "src/main/kotlin/org/ucombinator/jade/classfile/Flags.txt").readText(Charsets.UTF_8))
    // TODO: use spotless for formatting
    // val scalafmt = org.scalafmt.interfaces.Scalafmt
    //   .create(this.getClass.getClassLoader)
    //   .withReporter(new ScalafmtSbtReporter(streamsValue.log, new java.io.OutputStreamWriter(streamsValue.binary()), true));
    // if (flagsCode != scalafmt.format(scalafmtConfig.value.toPath(), sourceFile.toPath(), flagsCode)) {
    //   streamsValue.log.warn(f"\nGenerated file isn't formatted properly: ${sourceFile}\n\n")
    // }
    val generatedSrcDir = File(buildDir, "generated/sources/jade/src/main/kotlin")
    generatedSrcDir.mkdirs()
    val file = File(generatedSrcDir, "Flags.kt")
    file.writeText(flagsCode)
  }
}

tasks.withType<Test> {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()

  this.testLogging {
    this.showStandardStreams = true
  }
}

// Avoid the warning: 'compileJava' task (current target is 11) and
// 'compileKotlin' task (current target is 1.8) jvm target compatibility should
// be set to the same Java version.
//
// For why we fully qualify KotlinCompile see:
// https://stackoverflow.com/questions/55456176/unresolved-reference-compilekotlin-in-build-gradle-kts
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
  kotlinOptions { jvmTarget = project.java.targetCompatibility.toString() }
  dependsOn(tasks.generateGrammarSource)
  dependsOn(tasks.generateTestGrammarSource)
  dependsOn(flagsGen)
}

// tasks.withType<DokkaTask>().configureEach {
//   dokkaSourceSets {
//     named("main") {
//       includes.from("Module.md")
//     }
//   }
// }

for (i : ExternalDependency in project.configurations.flatMap { it.dependencies }.filterIsInstance<ExternalDependency>()) {
  println(i)
  println(i.group)
  println(i.name)
  println(i.version)
  println(" (configuration: " + (i.targetConfiguration?:"default") + ")")
}
